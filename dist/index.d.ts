/// <reference types="lodash" />
import * as React from "react";
import { EditorState, Plugin } from "prosemirror-state";
import { MarkdownParser } from "prosemirror-markdown";
import { MarkdownSerializer } from "./lib/markdown/serializer";
import { Decoration, EditorView } from "prosemirror-view";
import { Schema, NodeSpec, MarkSpec, Node as ProsemirrorNode } from "prosemirror-model";
import { InputRule } from "prosemirror-inputrules";
import { DefaultTheme, ThemeProps } from "styled-components";
import baseDictionary from "./dictionary";
import { SearchResult } from "./components/LinkEditor";
import { EmbedDescriptor } from "./types";
import Mark from "./marks/Mark";
import Tooltip from "./components/Tooltip";
import Extension from "./lib/Extension";
import ExtensionManager from "./lib/ExtensionManager";
import ComponentView from "./lib/ComponentView";
import { PluginSimple } from "markdown-it";
export { schema, parser, serializer, renderToHtml } from "./server";
export { default as Extension } from "./lib/Extension";
export declare const theme: {
    isDark: boolean;
    background: string;
    secondaryBackground: string;
    link: string;
    cursor: string;
    text: string;
    textSecondary: string;
    textTertiary: string;
    placeholder: string;
    sidebarBackground: string;
    sidebarActiveBackground: string;
    sidebarControlHoverBackground: string;
    sidebarDraftBorder: string;
    sidebarText: string;
    backdrop: string;
    shadow: string;
    modalBackdrop: string;
    modalBackground: string;
    modalShadow: string;
    menuItemSelected: string;
    menuBackground: string;
    menuShadow: string;
    divider: string;
    titleBarDivider: string;
    inputBorder: string;
    inputBorderFocused: string;
    listItemHoverBackground: string;
    toolbarHoverBackground: string;
    toolbarBackground: string;
    toolbarInput: string;
    toolbarItem: string;
    tableDivider: string;
    tableSelected: string;
    tableSelectedBackground: string;
    tableHeaderBackground: string;
    buttonNeutralBackground: string;
    buttonNeutralText: string;
    buttonNeutralBorder: string;
    tooltipBackground: string;
    tooltipText: string;
    toastBackground: string;
    toastText: string;
    quote: string;
    codeBackground: string;
    codeBorder: string;
    embedBorder: string;
    horizontalRule: string;
    progressBarBackground: string;
    scrollbarBackground: string;
    scrollbarThumb: string;
    fontFamily: string;
    fontFamilyMono: string;
    fontWeight: number;
    backgroundTransition: string;
    selected: string;
    buttonBackground: string;
    buttonText: string;
    textHighlight: string;
    textHighlightForeground: string;
    code: string;
    codeComment: string;
    codePunctuation: string;
    codeNumber: string;
    codeProperty: string;
    codeTag: string;
    codeString: string;
    codeSelector: string;
    codeAttr: string;
    codeEntity: string;
    codeKeyword: string;
    codeFunction: string;
    codeStatement: string;
    codePlaceholder: string;
    codeInserted: string;
    codeImportant: string;
    noticeInfoBackground: string;
    noticeInfoText: string;
    noticeTipBackground: string;
    noticeTipText: string;
    noticeWarningBackground: string;
    noticeWarningText: string;
    breakpoints: {
        mobile: number;
        tablet: number;
        desktop: number;
        desktopLarge: number;
    };
    padding: string;
    vpadding: string;
    hpadding: string;
    sidebarWidth: number;
    sidebarCollapsedWidth: number;
    sidebarMinWidth: number;
    sidebarMaxWidth: number;
    transparent: string;
    almostBlack: string;
    lightBlack: string;
    almostWhite: string;
    veryDarkBlue: string;
    slate: string;
    slateLight: string;
    slateDark: string;
    smoke: string;
    smokeLight: string;
    smokeDark: string;
    white: string;
    white05: string;
    white10: string;
    white50: string;
    white75: string;
    black: string;
    black05: string;
    black10: string;
    black50: string;
    primary: string;
    yellow: string;
    warmGrey: string;
    searchHighlight: string;
    danger: string;
    warning: string;
    success: string;
    info: string;
    brand: {
        red: string;
        pink: string;
        purple: string;
        blue: string;
        marine: string;
        green: string;
        yellow: string;
    };
};
export declare type Props = {
    id?: string;
    value?: string;
    defaultValue: string;
    placeholder: string;
    extensions?: (typeof Node | typeof Mark | typeof Extension | Extension)[];
    autoFocus?: boolean;
    readOnly?: boolean;
    readOnlyWriteCheckboxes?: boolean;
    dictionary: typeof baseDictionary;
    dir?: "rtl" | "ltr";
    grow?: boolean;
    template?: boolean;
    maxLength?: number;
    scrollTo?: string;
    uploadFile?: (file: File) => Promise<string>;
    onBlur?: () => void;
    onFocus?: () => void;
    onSave?: (options: {
        done: boolean;
    }) => void;
    onCancel?: () => void;
    onChange?: (value: () => string | undefined) => void;
    onFileUploadStart?: () => void;
    onFileUploadStop?: () => void;
    onCreateLink?: (title: string) => Promise<string>;
    onSearchLink?: (term: string) => Promise<SearchResult[]>;
    onClickLink: (href: string, event: MouseEvent | React.MouseEvent<HTMLButtonElement>) => void;
    onHoverLink?: (event: MouseEvent) => boolean;
    onClickHashtag?: (tag: string, event: MouseEvent) => void;
    onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>) => void;
    embeds: EmbedDescriptor[];
    embedsDisabled?: boolean;
    onShowToast: (message: string) => void;
    className?: string;
    style?: React.CSSProperties;
};
declare type State = {
    isRTL: boolean;
    isEditorFocused: boolean;
    selectionMenuOpen: boolean;
    blockMenuOpen: boolean;
    linkMenuOpen: boolean;
    blockMenuSearch: string;
    emojiMenuOpen: boolean;
};
declare class RichMarkdownEditor extends React.PureComponent<Props & ThemeProps<DefaultTheme>, State> {
    static defaultProps: {
        defaultValue: string;
        dir: string;
        placeholder: string;
        onImageUploadStart: () => void;
        onImageUploadStop: () => void;
        onClickLink: (href: string) => void;
        embeds: never[];
        extensions: never[];
        tooltip: typeof Tooltip;
    };
    state: {
        isRTL: boolean;
        isEditorFocused: boolean;
        selectionMenuOpen: boolean;
        blockMenuOpen: boolean;
        linkMenuOpen: boolean;
        blockMenuSearch: string;
        emojiMenuOpen: boolean;
    };
    isBlurred: boolean;
    extensions: ExtensionManager;
    element: React.RefObject<HTMLDivElement>;
    view: EditorView;
    schema: Schema;
    serializer: MarkdownSerializer;
    parser: MarkdownParser;
    pasteParser: MarkdownParser;
    plugins: Plugin[];
    keymaps: Plugin[];
    inputRules: InputRule[];
    nodeViews: {
        [name: string]: (node: ProsemirrorNode, view: EditorView, getPos: () => number, decorations: Decoration<{
            [key: string]: any;
        }>[]) => ComponentView;
    };
    nodes: {
        [name: string]: NodeSpec;
    };
    marks: {
        [name: string]: MarkSpec;
    };
    commands: Record<string, any>;
    rulePlugins: PluginSimple[];
    events: any;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props): void;
    init(): void;
    createExtensions(): ExtensionManager;
    createPlugins(): Plugin<any, any>[];
    createRulePlugins(): PluginSimple[];
    createKeymaps(): Plugin<any, any>[];
    createInputRules(): InputRule<any>[];
    createNodeViews(): {};
    createCommands(): {};
    createNodes(): {};
    createMarks(): {};
    createSchema(): Schema<string, string>;
    createSerializer(): MarkdownSerializer;
    createParser(): MarkdownParser<any>;
    createPasteParser(): MarkdownParser<any>;
    createState(value?: string): EditorState<any>;
    createDocument(content: string): ProsemirrorNode<any>;
    private createView;
    scrollToAnchor(hash: string): void;
    private calculateDir;
    value: () => string;
    handleChange: () => void;
    handleSave: () => void;
    handleSaveAndExit: () => void;
    private handleEditorBlur;
    private handleEditorFocus;
    handleOpenSelectionMenu: () => void;
    handleCloseSelectionMenu: () => void;
    handleOpenLinkMenu: () => void;
    handleCloseLinkMenu: () => void;
    handleOpenBlockMenu: (search: string) => void;
    handleCloseBlockMenu: () => void;
    handleSelectRow: (index: number, state: EditorState) => void;
    handleSelectColumn: (index: number, state: EditorState) => void;
    handleSelectTable: (state: EditorState) => void;
    focusAtStart: () => void;
    focusAtEnd: () => void;
    getHeadings: () => {
        title: string;
        level: number;
        id: string;
    }[];
    dictionary: ((providedDictionary?: Partial<typeof baseDictionary>) => {
        addColumnAfter: string;
        addColumnBefore: string;
        addRowAfter: string;
        addRowBefore: string;
        alignCenter: string;
        alignLeft: string;
        alignRight: string;
        bulletList: string;
        checkboxList: string;
        codeBlock: string;
        codeCopied: string;
        codeInline: string;
        createLink: string;
        createLinkError: string;
        createNewDoc: string;
        deleteColumn: string;
        deleteRow: string;
        deleteTable: string;
        deleteImage: string;
        downloadImage: string;
        replaceImage: string;
        alignImageLeft: string;
        alignImageRight: string;
        alignImageDefault: string;
        em: string;
        embedInvalidLink: string;
        findOrCreateDoc: string;
        h1: string;
        h2: string;
        h3: string;
        heading: string;
        hr: string;
        image: string;
        file: string;
        imageUploadError: string;
        imageCaptionPlaceholder: string;
        info: string;
        infoNotice: string;
        link: string;
        linkCopied: string;
        mark: string;
        newLineEmpty: string;
        newLineWithSlash: string;
        noResults: string;
        openLink: string;
        orderedList: string;
        pageBreak: string;
        pasteLink: string;
        pasteLinkWithTitle: (title: string) => string;
        placeholder: string;
        quote: string;
        removeLink: string;
        searchOrPasteLink: string;
        strikethrough: string;
        strong: string;
        subheading: string;
        table: string;
        tip: string;
        tipNotice: string;
        warning: string;
        warningNotice: string;
    }) & import("lodash").MemoizedFunction;
    render(): JSX.Element;
}
export default RichMarkdownEditor;
//# sourceMappingURL=index.d.ts.map